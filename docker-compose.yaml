version: '3.7'
services:
  backend1:
    container_name: backend1
    build:
      context: ./app
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend1:5000/api/coins/all"]
      interval: 10s
      timeout: 10s
      retries: 5

  backend2:
    container_name: backend2
    build:
      context: ./app
    ports:
      - "5002:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend2:5000/api/coins/all"]
      interval: 10s
      timeout: 10s
      retries: 5

  backend3:
    container_name: backend3
    build:
      context: ./app
    ports:
      - "5003:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend3:5000/api/coins/all"]
      interval: 10s
      timeout: 10s
      retries: 5

  init:
    container_name: init
    build:
      context: ./app
    command: ["sh", "-c", "flask db upgrade && flask seed all"]
    depends_on:
      backend1:
        condition: service_healthy


  frontend:
    container_name: frontend
    build:
      context: ./react-app
    ports:
      - "3000:3000"
    environment:
      - HTTP_PROXY=http://nginx:80
      - HTTPS_PROXY=http://nginx:80
    depends_on:
      backend1:
        condition: service_healthy
      backend2:
        condition: service_healthy
      backend3:
        condition: service_healthy

  nginx:
    container_name: nginx
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  producer:
    container_name: producer
    build:
      context: ./producer
    environment:
      KAFKA_TOPIC: test
    depends_on:
      kafka:
        condition: service_healthy

  consumer:
    container_name: consumer
    build:
      context: ./consumer
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - "6379"
    ports:
      - "6379:6379"
    restart: always
    command: redis-server --loglevel warning
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka
    ports:
      - "0.0.0.0:9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"


  influxdb:
    image: influxdb
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=myuser
      - DOCKER_INFLUXDB_INIT_PASSWORD=mypassword
      - DOCKER_INFLUXDB_INIT_ORG=kyle
      - DOCKER_INFLUXDB_INIT_BUCKET=test-bucket
      - DOCKER_INFLUXDB_INIT_RETENTION=1w
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=randomTokenValue

    restart: always
