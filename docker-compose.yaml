version: '3.7'
services:
  backend:
    build:
      context: ./app
    ports:
      - "5000:5000"
    # volumes:
    #   - data:/app/data

  frontend:
    build:
      context: ./react-app
    ports:
      - "3000:3000"

  producer:
    build:
      context: ./producer
    environment:
      KAFKA_TOPIC: test

  consumer:
    build:
      context: ./consumer


  redis:
    image: redis:latest
    container_name: redis
    expose:
      - "6379"
    ports:
      - "6379:6379"
    restart: always
    command: redis-server --loglevel warning
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"


  influxdb:
    image: influxdb
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_ADMIN_USER=myuser
      - INFLUXDB_ADMIN_PASSWORD=mypassword
      - INFLUXDB_DB=mydatabase

      # - INFLUXDB_DB=database_name
      # - INFLUXDB_ADMIN_ENABLED=true
      # - INFLUXDB_ADMIN_USER=admin
      # - INFLUXDB_ADMIN_PASSWORD=admin_password
      # - INFLUXDB_USER=your_username
      # - INFLUXDB_USER_PASSWORD=your_password
    # volumes:
    #   - influxdb-data:/var/lib/influxdb
    restart: always

#   redis-client:
#     build:
#       context: .
#     command: python redis_client.py
#     environment:
#       KAFKA_TOPIC: test
#       REDIS_HOST: redis
#       INFLUX_DB_HOST: influxdb
#       INFLUXDB_USER: myuser
#       INFLUXDB_PASSWORD: mypassword
#       INFLUXDB_DATABASE: mydatabase
#     restart: always
#     depends_on:
#       kafka:
#         condition: service_healthy
#       # - redis


# volumes:
#   data:
